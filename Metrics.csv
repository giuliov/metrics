Name,Description,Alternate names,Roll-up dimensions,Category,Type,Phase,Persona,Sources,Data,Data-point Formula,Formulas,Example
Sprint Scope Stability,% of work items planned and committed in sprint but moved in or out after sprint started,,,Quality,Percentage,,Management,,,,,
"Actual delivery cost per Feature, Epic",Aggregates all delivery and fix costs broken down by Feature,,,Efficency,Money,,Exec,,,,,
Change fail rate,Captured is the number of application-related production incidents. This is used with Change Frequency to calculate Change Fail Rate.  Change Fail Rate measures the relationship between changes and outages in production.,,,Stability,1/Time,,Exec,,Capture # of application change related production incidents from Service Now Incident Report,,,
"Application Users (active, total)",Count of application users (logins),,,,Number,,Exec,,,,,
"Security Vulnerabilities (total, grouped by Level)",Counts the vulnerabilities found by scanning tools,,,Quality,Number,,Exec,,Count of unique vulnerabilities found by Severity Level,,,
Backlog Quality - Data Integrity,Data validation of backlog tool across several layers of work items - what % Data Flags,,,Quality,Percentage,,Management,,,,,
Deployment lead time,From Feature complete to deployed,,,Speed,Time,,Management,,,,,
Recovery Time (MTTR),"Mean Time to Recover measures the time from when a failure occurs, to recovery from that failure. ",,,Stability,Time,,Exec,,"Capture three metrics P1, P2 and aggregate of P1-P4 incidents.",,,
Deployment frequency,Measures frequency of changes to production,,,Speed,1/Time,,Exec,,Capture # of production changes from Service Now Application Change Report,,,
Test Effectiveness,Measures how many bugs slipped through testing (either manual or automated) and was later found in Production,Test Effectiveness Using Defect Containment efficiency,,Quality,,,Exec,,,,Number of Bugs fixed / (Total number of bugs found in unit+integration+system testing + number of Bugs found after Release),
Incidents (Bugs) found after Release,"Measures the overall quality of a Release, especially of the testing process","Defect escape rate, Defect Leakage",,Quality,Ratio,,Exec,,Count the incidents associated with the CI after the deployment of a new Release,,Compare the Incident count with the total number of test executed,
Code Maintainability,Measures the quality of code captured by Code Smell issues,,,Quality,Grade,,Management,,Use Sonar out-of-the-box metric based on SQALE,,,
Integration Tests vs Unit ratio,"Measures the quality of test effort, the lower the ratio the better",,,Quality,Ratio,,Management,,"Total number of tests can be easily extracted from tools, classification requires help from development team.",,,
UI vs Integration Tests ratio,"Measures the quality of test effort, the lower the ratio the better (Selenium tests are UI by default)",,,Quality,Ratio,,Management,,"Total number of tests can be easily extracted from tools, classification requires help from development team.",,,
Feature Lead Time,"Measures the time it takes for work to be implemented, tested and delivered to production",Cycle time,,Speed,Time (days),,Exec,,"Start: Time when Feature moves to InProgress status
Finish: Time when ServiceNow Change Request moves to Closed status",Finish - Start,moving average,
User Story Lead Time (days),"Measures the time it takes for work to be implemented, tested and delivered to production",,,Speed,Time (days),,Management,,"Start: Time when Story moves to InProgress status
Finish: Time when ServiceNow Change Request moves to Closed status",Finish - Start,moving average,
# of Sprints of Work Ready,Number of sprints of work under the initiative backlog that is immediately actionable by teams,,,Quality,Number,,Management,,,,,
Availability (% uptime),Percentage of time the application is available to its users excluding agreed maintenance,,,Stability,Percentage,,Exec,,"When application has a user-level monitoring, use the downtime/uptime metrics from the tool.
Otherwise use the first and last Alerts from monitoring tool to determine the downtime period.",,,
Code Releasability,Releasability is based on the project's quality gate: Passed is releasable and Failed is not.,,,Quality,Grade,,Management,,Use Sonar out-of-the-box metric based on SQALE,,,
Cost of running the Application,"Total cost of infrastructure resources (hardware, licenses) and support resources (people)",,,Efficency,Money,,Exec,,,,,
Code Reliability,"Weights the known Bugs according to their rating: the worse the bugs, the less reliable",,,Quality,Grade,,Management,,Use Sonar out-of-the-box metric based on SQALE,,,
"Estimated run cost (Journey, Application)",,,,Efficency,Money,,Exec,,,,,
"Development cost per Feature, Epic",,,,Efficency,Money,,Exec,,,,,
Estimated development cost per Epic,,,,Efficency,Money,,Management,,,,,
"Code coverage (all, new code, by test type)",,,,Quality,Percentage,,Exec,,,,,
Manual vs Automated Tests ratio,,,,Quality,Ratio,,Management,,,,,
"Test environment lead time (average, peak, stddev, by Type)",,,,Quality,,,Management,,,,,
"Manual test duration (average, peak, stddev)",,,,Quality,,,Management,,,,,
"Automated test duration (average, peak, stddev)",,,,Quality,,,Management,,,,,
"Issues from static analysis (total, new, grouped by Level)",,,,Quality,,,Management,,,,,
Total number of test cases,,,,Quality,Number,,Management,,,,,
Test cases per Feature,,,,Quality,Ratio,,Management,,,,,
"Defects found by test type (manual vs automated, integration vs unit)",,,,Quality,Number,,Management,,,,,
Defects found from previous Sprints,,,,Quality,Number,,Management,,,,,
Bugs per Feature,,Requirement Defect Density,,Quality,Number,,Management,,,,,
Bug Severity,,,,Quality,Number,,Management,,,,,
Planned test hours,,,,Quality,Number,,Management,,,,,
Actual test hours,,,,Quality,Number,,Management,,,,,
"Branch duration (moving average, peak)",,,,Quality,Time,,Team,,,,,
Older stale branch (days),,,,Quality,Time,,Team,,,,,
# Stale branches,,,,Quality,Number,,Team,,,,,
"Code churn (changed lines of code, per Commit, per PR)",,,,Quality,Number,,Team,,,,,
Broken builds,,,,Quality,Number,,Team,,,,,
Test environment availability,,,,Quality,,,Team,,,,,
# of Test case passed,,,,Quality,Number,,Team,,,,,
# of Test case failed,,,,Quality,Number,,Team,,,,,
# of Test case blocked,,,,Quality,Number,,Team,,,,,
# of Test case executed per Sprint,,,,Quality,Number / Time,,Team,,,,tests run / time,
Defects fixed in Sprint,,,,Quality,Number,,Team,,,,,
Defects / User Stories in Sprint,,,,Quality,Number,,Team,,,,,
Incomplete Defects / User Stories in Sprint,,,,Quality,,,Team,,,,,
Test Design Efficiency,,,,Quality,Number / Time,,,,,,test designed / time,
Test Review Efficiency,,,,Quality,Number / Time,,,,,,test reviewed / time,
Passed Test cases,,,,Quality,Percentage,,,,,,test passed/test executed,
Failed Test cases,,,,Quality,Percentage,,,,,,test failed/test executed,
Blocked Test cases,,,,Quality,Percentage,,,,,,test blocked/test executed,
# of Defects per Test Case,,,,Quality,Ratio,,,,,,defects / tests,
Defects found per manual testing hour,,,,Quality,Number / Time,,,,,,defects / testing hours,
# of Defects found,,,,Quality,Number,,,,,,,
# of Defects accepted,,,,Quality,Number,,,,,,,
# of Defects rejected,,,,Quality,Number,,,,,,,
# of Defects deferred,,,,Quality,Number,,,,,,,
# of Critical defects,,,,Quality,Number,,,,,,,
Fixed Defects,,,,Quality,Percentage,,,,,,defects fixed / defects reported,
Accepted Defects,,,,Quality,Percentage,,,,,,defects accepted as valid by team / defects reported,
Rejected Defects,,,,Quality,Percentage,,,,,,defects rejected as invalid by team / defects reported,
Deferred Defects,,,,Quality,Percentage,,,,,,defects deferred for future releases / defects reported,
Critical Defects,,,,Quality,Percentage,,,,,,critical defects / defects reported,
Testing Hours per Bug fixed,,,,Quality,Time,,,,,,,
Time to test a Pfix,,,,Quality,Time,,,,,,totale time between defect fix to retest for all defects / total number of defects,
Test Coverage,,,,Quality,,,,,,,,
# of Features released,,Change volume (per Release),,Speed,Number,,Exec,,,,,
"PR approval time (average, peak)",,,,Speed,Time,,Management,,,,,
# of User stories released,,Change volume (per Release),,Speed,Number,,Management,,,,,
# of Bug fixed,,Change volume (per Release),,Speed,Number,,Management,,,,,
# of Story Points released,,Change volume (per Release),,Speed,Number,,Management,,,,,
Development hours per Release,,,,Speed,Time,,Management,,,,,
Deployment duration,,,,Speed,Time,,Management,,,,,
Manual vs Automated Deployment ratio,,,,Speed,Ratio,,Management,,,,,
Epic Lead Time,,,,Speed,Time,,n/a,,,,,
% Code churn (changed lines of code) per Release,,Change volume (per Release),,Speed,Percentage,,Team,,,,,
# of PRs release,,Change volume (per Release),,Speed,Number,,Team,,,,,
% bytes changed per Release,,Change volume (per Release),,Speed,Percentage,,Team,,,,,
Deployment speed (Deployment duration / Total bytes),,,,Speed,,,Team,,,,,
Incidents per Release,,Defect escape rate,,Stability,Ratio,,Exec,,,,,
Detection Time (MTTD),,,,Stability,Time,,Exec,,,,,
# PFix per Release,,,,Stability,Ratio,,Exec,,,,,
Deployment rollback ratio,,,,Stability,Ratio,,Exec,,,,,
Infra Incidents per Release,,,,Stability,Ratio,,Exec,,,,,
Hours per Pfix implemented,,,,Stability,Time,,Exec,,,,,
Lead time per Pfix,,,,Stability,Time,,Exec,,,,,
Cost per Pfix,,,,Stability,Money,,Exec,,,,,
Application Performance (relative to baseline),,Response Time ,,Stability,,,Management,,,,,
"Application Infrastructure slack capacity (CPU, RAM, Disk, Network bandwidth)",,,,Stability,,,Management,,,,,
Cost per Bug fixed,,,,Stability,Money,,Management,,,,,
Hours per Bug fixed,,,,Stability,Time,,Management,,,,,
Build duration (by type),,,,,Time,,Management,,,,,
Worked hours to-date,,,,,,,Management,,,,,
Worked hours per Sprint,,,,,,,Management,,,,,
"Worked hours per Feature, User Story",,,,,,,Management,,,,,
Development cost to-date,,,,,,,Management,,,,,
Development cost per Sprint,,,,,,,Management,,,,,
Story Points per Feature,,,,,Number,,Management,,,,,
# Commits per PR,,,,,Number,,Team,,,,,
Merge conflicts frequency,,,,,Time,,Team,,,,,
Build Infrastructure availability,,,,,Percentage,,Team,,,,,
Builds per Commit,,,,,Ratio,,Team,,,,,
Builds per Sprint per User Story,,,,,,,Team,,,,,
Story Points to-date,,,,,Number,,Team,,,,,
Story Points per Sprint,,Velocity,,,,,Team,,,,,
Incomplete Story Points per Sprint,,,,,Number,,Team,,,,,
"Work in progress (per capita, by type)",,,,,Number,,Team,,,,,
Open Security Vulnerabilities (grouped by Level),,,,,,,,,,,,
Unplanned Work Rate,,,,,,,,,,,,
Flow Time,,,,,,,,,,,,
Work in Process,,,,,,,,,,,,
"Distribution of Effort (stories/bugs, points, by sprint)",,,,,,,,,,,,
Infrastructure Utilization,,,,,,,,,,,,
Bug/Defect Age,,,,,,,,,,,,
